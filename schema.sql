-- A. MASTER DATA TABLES (STAMM)
CREATE TABLE VAT_RATES (
    VAT_ID INT PRIMARY KEY,                       -- PK: DSFinV-K ID (1, 2, 5, etc.)
    RATE DECIMAL(5, 2) NOT NULL,                  -- Percentage rate
    DESCRIPTION NVARCHAR(100)                     -- German legal description
);

CREATE TABLE POS_REGISTERS (
    REGISTER_SERIAL_NUMBER NVARCHAR(50) PRIMARY KEY, -- PK: Unique ID for the terminal (KASSEN_SERIENNUMMER)
    LOCATION_ID NVARCHAR(50) NOT NULL
);

CREATE TABLE TSE_UNITS (
    TSE_SERIAL_NUMBER NVARCHAR(50) PRIMARY KEY,   -- PK: Unique ID for the certified TSE
    PUBLIC_KEY NVARCHAR(MAX) NOT NULL,            -- Certificate Public Key
    CERTIFICATE_VALID_UNTIL DATETIMEOFFSET        -- Expiration date of the TSE certificate
);

-- B. TRANSACTION DATA TABLES (BON)
CREATE TABLE RECEIPT_HEADER (
    RECEIPT_ID NVARCHAR(50) PRIMARY KEY,          -- PK: Unique Transaction ID (BON_ID)
    REGISTER_SERIAL_NUMBER NVARCHAR(50) NOT NULL, -- FK: Links to POS_REGISTERS
    START_TIME DATETIMEOFFSET NOT NULL,           -- Transaction start time
    TOTAL_AMOUNT DECIMAL(10, 2) NOT NULL,         -- Gross total
    PROCESS_TYPE NVARCHAR(50) NOT NULL,           -- DSFinV-K process type (e.g., Kassenbeleg-V1)
    FOREIGN KEY (REGISTER_SERIAL_NUMBER) REFERENCES POS_REGISTERS(REGISTER_SERIAL_NUMBER)
);

CREATE TABLE RECEIPT_LINE_ITEM (
    RECEIPT_ID NVARCHAR(50) NOT NULL,             -- PK, FK: Part of composite key, links to RECEIPT_HEADER
    LINE_NUMBER INT NOT NULL,                     -- PK: Sequential line number (POS_ZEILE)
    VAT_ID INT NOT NULL,                          -- FK: Links to VAT_RATES
    QUANTITY DECIMAL(10, 3) NOT NULL,             -- Item count (negative for returns)
    UNIT_PRICE DECIMAL(10, 2) NOT NULL,           -- Price per unit
    ITEM_NAME NVARCHAR(100) NOT NULL,
    PRIMARY KEY (RECEIPT_ID, LINE_NUMBER),
    FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT_HEADER(RECEIPT_ID),
    FOREIGN KEY (VAT_ID) REFERENCES VAT_RATES(VAT_ID)
);

CREATE TABLE PAYMENT_DETAILS (
    RECEIPT_ID NVARCHAR(50) NOT NULL,             -- PK, FK: Part of composite key, links to RECEIPT_HEADER
    PAYMENT_METHOD NVARCHAR(50) NOT NULL,         -- PK: DSFinV-K type (Bar, Kreditkarte, etc.)
    PAID_AMOUNT DECIMAL(10, 2) NOT NULL,
    PRIMARY KEY (RECEIPT_ID, PAYMENT_METHOD),
    FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT_HEADER(RECEIPT_ID)
);

-- C. COMPLIANCE & CLOSING TABLES
CREATE TABLE TSE_LOG (
    RECEIPT_ID NVARCHAR(50) PRIMARY KEY,          -- PK, FK: 1:1 link to RECEIPT_HEADER
    TSE_SERIAL_NUMBER NVARCHAR(50) NOT NULL,      -- FK: Links to TSE_UNITS
    SIGNATURE_COUNTER INT NOT NULL,               -- Mandatory sequential counter
    SIGNATURE_VALUE NVARCHAR(MAX) NOT NULL,       -- Cryptographic signature string
    LOG_TIME DATETIMEOFFSET NOT NULL,             -- Time stamp of the signing operation
    FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT_HEADER(RECEIPT_ID),
    FOREIGN KEY (TSE_SERIAL_NUMBER) REFERENCES TSE_UNITS(TSE_SERIAL_NUMBER)
);

CREATE TABLE CLOSING_REPORT (
    Z_REPORT_ID INT PRIMARY KEY,
    REGISTER_SERIAL_NUMBER NVARCHAR(50) NOT NULL, -- FK: Links to POS_REGISTERS
    DATE_TIME DATETIMEOFFSET NOT NULL,            -- Time of closing
    TOTAL_REVENUE DECIMAL(10, 2) NOT NULL,        -- Daily sales total
    FOREIGN KEY (REGISTER_SERIAL_NUMBER) REFERENCES POS_REGISTERS(REGISTER_SERIAL_NUMBER)
);

-- A1. Location/Outlet Master (Crucial for multi-location restaurants)
CREATE TABLE RESTAURANT_TABLES (
    TABLE_ID NVARCHAR(50) PRIMARY KEY,     -- e.g., 'TISCH_1', 'BAR_2'
    TABLE_NAME NVARCHAR(100) NOT NULL,     -- e.g., 'Am Fenster'
    LOCATION_ID NVARCHAR(50) NOT NULL      -- For section management
);


-- A2. Staff/User Management (Pflicht für Protokollierung!)
CREATE TABLE STAFF_USERS (
    USER_ID NVARCHAR(50) PRIMARY KEY,      -- PK: Unique user ID
    USER_PIN_HASH NVARCHAR(255) NOT NULL,  -- Hashed PIN for login
    FIRST_NAME NVARCHAR(100) NOT NULL,
    LAST_NAME NVARCHAR(100) NOT NULL,
    ROLE NVARCHAR(50) NOT NULL,            -- e.g., 'Kellner', 'Manager', 'Admin'
    IS_ACTIVE BIT NOT NULL DEFAULT 1
);

-- A3. Product/Article Master (Stammdaten)
CREATE TABLE MENU_ITEMS (
    ITEM_ID NVARCHAR(50) PRIMARY KEY,
    ITEM_NAME NVARCHAR(100) NOT NULL,
    ITEM_GROUP NVARCHAR(50) NOT NULL,      -- e.g., 'Hauptgerichte', 'Getränke'
    VAT_ID INT NOT NULL,                   -- FK: Default VAT rate
    BASE_PRICE DECIMAL(10, 2) NOT NULL,
    IS_ACTIVE BIT NOT NULL DEFAULT 1,
    FOREIGN KEY (VAT_ID) REFERENCES VAT_RATES(VAT_ID)
);


-- B1. Order Header (Trennung von Bestellung und Rechnung!)
CREATE TABLE ORDER_HEADER (
    ORDER_ID NVARCHAR(50) PRIMARY KEY,        -- Internal Order ID
    TABLE_ID NVARCHAR(50) NOT NULL,           -- FK: Which table?
    STAFF_USER_ID NVARCHAR(50) NOT NULL,      -- FK: Who took the order?
    ORDER_STATUS NVARCHAR(50) NOT NULL,       -- e.g., 'OPEN', 'PAID', 'CANCELLED'
    ORDER_OPEN_TIME DATETIMEOFFSET NOT NULL,
    ORDER_CLOSE_TIME DATETIMEOFFSET NULL,
    GUEST_COUNT INT NULL,
    FOREIGN KEY (TABLE_ID) REFERENCES RESTAURANT_TABLES(TABLE_ID),
    FOREIGN KEY (STAFF_USER_ID) REFERENCES STAFF_USERS(USER_ID)
);

-- B2. Order Items (What was ordered)
CREATE TABLE ORDER_ITEMS (
    ORDER_ID NVARCHAR(50) NOT NULL,           -- PK, FK
    ORDER_LINE_NUMBER INT NOT NULL,           -- PK
    MENU_ITEM_ID NVARCHAR(50) NOT NULL,       -- FK: Links to master data
    QUANTITY DECIMAL(10, 3) NOT NULL,
    UNIT_PRICE DECIMAL(10, 2) NOT NULL,       -- Snapshot of price at time of order
    VAT_ID INT NOT NULL,                      -- Snapshot of VAT at time of order
    NOTES NVARCHAR(255) NULL,                 -- e.g., "Ohne Zwiebeln"
    PRIMARY KEY (ORDER_ID, ORDER_LINE_NUMBER),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDER_HEADER(ORDER_ID),
    FOREIGN KEY (MENU_ITEM_ID) REFERENCES MENU_ITEMS(ITEM_ID),
    FOREIGN KEY (VAT_ID) REFERENCES VAT_RATES(VAT_ID)
);

-- B3. Receipt-Order Link (A receipt can finalize one or more orders)
CREATE TABLE RECEIPT_ORDER_MAPPING (
    RECEIPT_ID NVARCHAR(50) NOT NULL,         -- FK
    ORDER_ID NVARCHAR(50) NOT NULL,           -- FK
    PRIMARY KEY (RECEIPT_ID, ORDER_ID),
    FOREIGN KEY (RECEIPT_ID) REFERENCES RECEIPT_HEADER(RECEIPT_ID),
    FOREIGN KEY (ORDER_ID) REFERENCES ORDER_HEADER(ORDER_ID)
);


-- C1. TSE Transaction Data (Erweiterung des TSE_LOG)
-- This is good, but ensure it captures ALL required TSE data fields.
-- Consider adding:
-- TRANSACTION_NUMBER NVARCHAR(255) NOT NULL, -- TSE-Transaktionsnummer
-- PROCESS_TYPE NVARCHAR(50) NOT NULL,        -- e.g., 'Beleg', 'Monatsabschluss'

-- C2. Cash Management (Kassenbuch)
CREATE TABLE CASH_DRAWER_MOVEMENTS (
    MOVEMENT_ID INT IDENTITY PRIMARY KEY,
    REGISTER_SERIAL_NUMBER NVARCHAR(50) NOT NULL,
    STAFF_USER_ID NVARCHAR(50) NOT NULL,      -- Who performed the action
    MOVEMENT_TYPE NVARCHAR(50) NOT NULL,      -- 'START', 'MANUAL_IN', 'MANUAL_OUT', 'CLOSING'
    AMOUNT DECIMAL(10, 2) NOT NULL,
    REASON NVARCHAR(255) NULL,                -- e.g., "Wechselgeld aufgefüllt"
    TIMESTAMP DATETIMEOFFSET NOT NULL,
    FOREIGN KEY (REGISTER_SERIAL_NUMBER) REFERENCES POS_REGISTERS(REGISTER_SERIAL_NUMBER),
    FOREIGN KEY (STAFF_USER_ID) REFERENCES STAFF_USERS(USER_ID)
);

-- C3. System Event Log (Protokollierung nach §146a AO)
CREATE TABLE SYSTEM_EVENT_LOG (
    EVENT_ID BIGINT IDENTITY PRIMARY KEY,
    EVENT_TIMESTAMP DATETIMEOFFSET NOT NULL,
    REGISTER_SERIAL_NUMBER NVARCHAR(50) NULL,
    STAFF_USER_ID NVARCHAR(50) NULL,          -- Who triggered the event
    EVENT_TYPE NVARCHAR(100) NOT NULL,        -- e.g., 'USER_LOGIN', 'RECEIPT_DELETED', 'TSE_ERROR'
    EVENT_DESCRIPTION NVARCHAR(MAX) NOT NULL, -- Detailed description
    RELATED_RECEIPT_ID NVARCHAR(50) NULL,
    FOREIGN KEY (REGISTER_SERIAL_NUMBER) REFERENCES POS_REGISTERS(REGISTER_SERIAL_NUMBER),
    FOREIGN KEY (STAFF_USER_ID) REFERENCES STAFF_USERS(USER_ID),
    FOREIGN KEY (RELATED_RECEIPT_ID) REFERENCES RECEIPT_HEADER(RECEIPT_ID)
);




    -- Consider adding a link to the original menu item for reporting
ALTER TABLE RECEIPT_LINE_ITEM
ADD MENU_ITEM_ID NVARCHAR(50) NULL,
    FOREIGN KEY (MENU_ITEM_ID) REFERENCES MENU_ITEMS(ITEM_ID);



    -- This needs significant expansion for a proper Tagesabschluss
ALTER TABLE CLOSING_REPORT
ADD
    STAFF_USER_ID NVARCHAR(50) NOT NULL, -- Who performed the closing
    START_CASH DECIMAL(10, 2) NOT NULL,  -- Expected cash at start
    EXPECTED_CASH DECIMAL(10, 2) NOT NULL, -- Calculated cash that should be in drawer
    COUNTED_CASH DECIMAL(10, 2) NOT NULL, -- Physically counted cash
    CASH_DIFFERENCE DECIMAL(10, 2) NOT NULL, -- (COUNTED - EXPECTED)
    -- Store totals per VAT rate for the period
    VAT_TOTAL_19 DECIMAL(10, 2) NOT NULL,
    VAT_TOTAL_7 DECIMAL(10, 2) NOT NULL,
    -- ... other VAT rates
    TOTAL_NET_AMOUNT DECIMAL(10, 2) NOT NULL,
    TOTAL_GROSS_AMOUNT DECIMAL(10, 2) NOT NULL,
    -- TSE Information for the closing
    TSE_SERIAL_NUMBER NVARCHAR(50) NOT NULL,
    TSE_SIGNATURE_COUNTER_START INT NOT NULL,
    TSE_SIGNATURE_COUNTER_END INT NOT NULL,

    FOREIGN KEY (STAFF_USER_ID) REFERENCES STAFF_USERS(USER_ID),
    FOREIGN KEY (TSE_SERIAL_NUMBER) REFERENCES TSE_UNITS(TSE_SERIAL_NUMBER);